name: Deploy Bot with Docker

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build:
    name: Build container with app
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          file: docker/app.dockerfile
          tags: ${{ secrets.DOCKER_USERNAME }}/serenity-soul-bot-image:latest
          cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/serenity-soul-bot-image:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/serenity-soul-bot-image:buildcache,mode=max

      - name: Create .env file
        run: |
          cat > .env << EOF
          REDIS_HOST=${{ secrets.REDIS_HOST }}
          REDIS_PORT=${{ secrets.REDIS_PORT }}
          REDIS_DATABASE=${{ secrets.REDIS_DATABASE }}
          
          DB_PATH=${{ secrets.DB_PATH }}
          
          WEBHOOK_SECRET=${{ secrets.WEBHOOK_SECRET }}
          WEBHOOK_PATH=${{ secrets.WEBHOOK_PATH }}
          BASE_WEBHOOK_URL=${{ secrets.BASE_WEBHOOK_URL }}
          
          API_TOKEN=${{ secrets.API_TOKEN }}
          ADMIN_CHAT=${{ secrets.ADMIN_CHAT }}
          DEEPSEEK_TOKEN=${{ secrets.DEEPSEEK_TOKEN }}
          EOF

      - name: Install sshpass
        run: sudo apt-get install -y sshpass

      - name: Copy files to server
        env:
          SSH_PASS: ${{ secrets.SERVER_PASSWORD }}
        run: |
          sshpass -p "$SSH_PASS" scp -o StrictHostKeyChecking=no -r docker-compose.yml .env ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }}:~/bot/

  deploy:
    name: Deploy with Docker Compose
    runs-on: ubuntu-latest
    needs: [ build ]

    steps:
      - name: Deploy with docker-compose
        env:
          SSH_PASS: ${{ secrets.SERVER_PASSWORD }}
        run: |
          sshpass -p "$SSH_PASS" ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} "cd ~/bot && \
          docker pull ${{ secrets.DOCKER_USERNAME }}/serenity-soul-bot-image:latest && \
          docker-compose down && \
          docker-compose up -d"

      - name: Verify deployment
        env:
          SSH_PASS: ${{ secrets.SERVER_PASSWORD }}
        run: |
          sshpass -p "$SSH_PASS" ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} "cd ~/bot && \
          docker-compose ps && \
          echo 'Deployment completed successfully!'"
